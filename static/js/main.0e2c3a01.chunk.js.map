{"version":3,"sources":["background.jpg","components/Header.tsx","components/Footer.tsx","components/MainContainer.tsx","components/Background.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","className","S","header","headerText","menuLink","onClick","document","getElementById","scrollIntoView","React","Component","css","Footer","id","footer","footerText","MainContainer","mainContainer","containerText","Background","background","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+FAAAA,EAAOC,QAAU,IAA0B,wC,m1BCGpC,IAAMC,EAAb,iLAGQ,OACI,yBAAKC,UAAWC,EAAEC,UACd,yBAAKF,UAAWC,EAAEE,cAAlB,YACA,yBAAKH,UAAWC,EAAEG,WAAYC,QAAS,kCAAMC,SAASC,eAAe,gBAA9B,aAAM,EAAkCC,mBAA/E,SACA,yBAAKR,UAAWC,EAAEG,WAAYC,QAAS,kCAAMC,SAASC,eAAe,kBAA9B,aAAM,EAAoCC,mBAAjF,gBAPhB,GAA4BC,IAAMC,WAa5BT,EAAI,CACNC,OAAO,kBAAMS,YAAL,MAIRR,WAAW,kBAAMQ,YAAL,MAOZP,SAAS,kBAAIO,YAAH,O,8SCzBP,IAAMC,EAAb,iLAEQ,OAAM,yBAAKC,GAAG,UAAUb,UAAWC,EAAEa,UACzB,yBAAKd,UAAWC,EAAEc,cAAlB,eAHpB,GAA4BN,IAAMC,WAQ5BT,EAAI,CACNa,OAAO,kBAAKH,YAAJ,MAIRI,WAAW,kBAAMJ,YAAL,O,uUCZT,IAAMK,EAAb,iLAEQ,OACI,yBAAKH,GAAG,QAAQb,UAAWC,EAAEgB,iBACzB,yBAAKjB,UAAWC,EAAEiB,iBAAlB,sBAJhB,GAAmCT,IAAMC,WAUnCT,EAAI,CACNgB,cAAc,kBAAMN,YAAL,MAIfO,cAAc,kBAAMP,YAAL,O,uUCdZ,IAAMQ,EAAa,WACtB,OAAO,yBAAKnB,UAAWC,EAAEmB,gBAGvBnB,EAAI,CACNmB,WAAW,kBAAMT,YAAL,IACSS,OCQVC,EAXH,WACV,OACE,yBAAKrB,UAAS,OACZ,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCFcsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAStB,SAASC,eAAe,SDqI3C,kBAAmBsB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0e2c3a01.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.70ee0874.jpg\";","import React from 'react';\r\nimport { css } from 'emotion';\r\n\r\nexport class Header extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n            <div className={S.header()}>\r\n                <div className={S.headerText()}>Lamdaini</div>\r\n                <div className={S.menuLink()} onClick={() => document.getElementById('about')?.scrollIntoView()}>About</div>\r\n                <div className={S.menuLink()} onClick={() => document.getElementById('contact')?.scrollIntoView()}>Contact</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst S = {\r\n    header:() => css`\r\n        display:flex;\r\n        padding:10px;\r\n        `,\r\n    headerText:() => css`\r\n        font-size: 4em;\r\n        text-align: left;\r\n        margin: 5px;\r\n        color: #800080;\r\n        margin-right:auto;\r\n    `,\r\n    menuLink:()=>css`\r\n        padding:10px;\r\n        margin:auto 0;\r\n        font-size:12px;\r\n        color: hsla(246, 57%, 76%, 1);\r\n        cursor:pointer;\r\n        &:hover{\r\n            background:hsl(231, 97%, 45%);\r\n            font-size:12.5px;\r\n        }\r\n    `,\r\n}","import React from \"react\";\r\nimport { css } from \"emotion\";\r\n\r\nexport class Footer extends React.Component{\r\n    render(){\r\n        return<div id='contact' className={S.footer()}>\r\n                    <div className={S.footerText()}>Footer</div>\r\n                </div>;\r\n    }\r\n}\r\n\r\nconst S = {\r\n    footer:()=> css`\r\n        height:20vh;\r\n        background-color:hsla(0, 6%, 13%, 0.1);;\r\n    `,\r\n    footerText:() => css`\r\n    font-size: 9em;\r\n    margin: auto;\r\n    line-height: 20vw;\r\n    color: purple;\r\n`\r\n}","import React from \"react\";\r\nimport { css } from \"emotion\";\r\n\r\n\r\nexport class MainContainer extends React.Component{\r\n    render(){\r\n        return(\r\n            <div id='about' className={S.mainContainer()}>\r\n                <div className={S.containerText()}>MainContainer</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst S = {\r\n    mainContainer:() => css`\r\n        height:80vh;\r\n        background-color:hsla(300, 100%, 25%, 0.5);;\r\n    `,\r\n    containerText:() => css`\r\n        font-size: 9em;\r\n        margin: auto;\r\n        line-height: 80vw;\r\n        color: #231f1f;\r\n    `\r\n\r\n}","import React from 'react';\r\nimport { css } from 'emotion';\r\nimport background from '../background.jpg'; // Tell Webpack this JS file uses this image\r\n\r\n\r\nexport const Background = () => {\r\n    return <div className={S.background()}></div>\r\n}\r\n\r\nconst S = { \r\n    background:() => css`\r\n        background:url(${background});\r\n        background-position: center;\r\n        background-repeat: no-repeat;\r\n        background-size: cover;\r\n        position: fixed;\r\n        height: 102vh;\r\n        width: 100vw;\r\n        z-index: -1;\r\n    `\r\n}","import React from 'react';\nimport './App.css';\nimport { Header } from './components/Header';\nimport { Footer } from './components/Footer';\nimport { MainContainer } from './components/MainContainer';\nimport { Background } from './components/Background';\n\n\nconst App = () => {\n  return (\n    <div className={`App`}>\n      <Background />\n      <Header />\n      <MainContainer />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}